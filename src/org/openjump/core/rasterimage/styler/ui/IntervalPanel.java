package org.openjump.core.rasterimage.styler.ui;

import org.openjump.core.rasterimage.styler.ColorUtils;
import org.openjump.core.rasterimage.styler.RasterStylesExtension;
import com.vividsolutions.jump.util.Range;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.openjump.core.attributeoperations.Classifier1D;
import org.openjump.core.rasterimage.styler.ColorMapEntry;
import org.openjump.core.rasterimage.RasterSymbology;
import org.openjump.core.rasterimage.styler.ui.ColorsTablePanel.TableType;

/**
 *
 * @author GeomaticaEAmbiente
 */
public class IntervalPanel extends javax.swing.JPanel {

    /**
     * Creates new form IntervalPanel
     * @param parent
     * @param rasterData
     * @param minMaxValues
     * @throws java.lang.Exception
     */
    public IntervalPanel(Component parent, double[] rasterData, Range minMaxValues) throws Exception {
        initComponents();
        this.parent = parent;
        this.rasterData = rasterData;
        this.minMaxValues = minMaxValues;
        
        fixComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel_Method = new javax.swing.JLabel();
        jComboBox_Method = new javax.swing.JComboBox();
        jButton_Values = new javax.swing.JButton();
        jLabel_Classes = new javax.swing.JLabel();
        jTextField_Classes = new javax.swing.JTextField();
        jPanel_Table = new javax.swing.JPanel();
        jButton_AddRow = new javax.swing.JButton();
        jButton_RemoveRow = new javax.swing.JButton();
        jButton_Ramp = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(365, 160));
        setPreferredSize(new java.awt.Dimension(365, 160));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        setLayout(layout);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle"); // NOI18N
        jLabel_Method.setText(bundle.getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.jLabel.method")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(jLabel_Method, gridBagConstraints);

        jComboBox_Method.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Method.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_MethodActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 3;
        add(jComboBox_Method, gridBagConstraints);

        jButton_Values.setText(bundle.getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.jButton.RampAll")); // NOI18N
        jButton_Values.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ValuesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jButton_Values, gridBagConstraints);

        jLabel_Classes.setText(bundle.getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.jLabel.Classes")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(jLabel_Classes, gridBagConstraints);

        jTextField_Classes.setText("5");
        jTextField_Classes.setMinimumSize(new java.awt.Dimension(70, 20));
        jTextField_Classes.setPreferredSize(new java.awt.Dimension(70, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jTextField_Classes, gridBagConstraints);

        jPanel_Table.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel_Table.setName(""); // NOI18N
        jPanel_Table.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.5;
        add(jPanel_Table, gridBagConstraints);

        jButton_AddRow.setText(bundle.getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.jButton.AddRow")); // NOI18N
        jButton_AddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddRowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        add(jButton_AddRow, gridBagConstraints);

        jButton_RemoveRow.setText(bundle.getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.jButton.RemoveRow")); // NOI18N
        jButton_RemoveRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveRowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        add(jButton_RemoveRow, gridBagConstraints);

        jButton_Ramp.setText(bundle.getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.jButton.Ramp")); // NOI18N
        jButton_Ramp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RampActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jButton_Ramp, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ValuesActionPerformed
        try {
            rampAll();
        } catch (Exception ex) {
            Logger.getLogger(IntervalPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_ValuesActionPerformed

    private void jButton_AddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddRowActionPerformed
        addRow();
    }//GEN-LAST:event_jButton_AddRowActionPerformed

    private void jButton_RemoveRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveRowActionPerformed
        removeRow();
    }//GEN-LAST:event_jButton_RemoveRowActionPerformed

    private void jButton_RampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RampActionPerformed
        try {
            rampColors();
        } catch (Exception ex) {
            Logger.getLogger(IntervalPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_RampActionPerformed

    private void jComboBox_MethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_MethodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_MethodActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
        if(firstTimeShown) {
            firstTimeShown = false;
            try {
                rampAll();
            } catch (Exception ex) {
                Logger.getLogger(IntervalPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddRow;
    private javax.swing.JButton jButton_Ramp;
    private javax.swing.JButton jButton_RemoveRow;
    private javax.swing.JButton jButton_Values;
    private javax.swing.JComboBox jComboBox_Method;
    private javax.swing.JLabel jLabel_Classes;
    private javax.swing.JLabel jLabel_Method;
    private javax.swing.JPanel jPanel_Table;
    private javax.swing.JTextField jTextField_Classes;
    // End of variables declaration//GEN-END:variables

    private void fixComponents() throws Exception {
        
        classMethods_m.put(ClassificationMethod.EQUAL_RANGE, java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.classMethods.EqualInterval"));
        classMethods_m.put(ClassificationMethod.JENKS, java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.classMethods.Jenks"));
        classMethods_m.put(ClassificationMethod.MAX_BREAKS, java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.classMethods.MaxBreaks"));
        classMethods_m.put(ClassificationMethod.MEAN_STDEV, java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.classMethods.MeanStDev"));
        classMethods_m.put(ClassificationMethod.QUANTILE, java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.classMethods.Quantiles"));
        
        jComboBox_Method.removeAllItems();
        jComboBox_Method.addItem(classMethods_m.get(ClassificationMethod.EQUAL_RANGE));
        jComboBox_Method.addItem(classMethods_m.get(ClassificationMethod.JENKS));
        jComboBox_Method.addItem(classMethods_m.get(ClassificationMethod.MAX_BREAKS));
        jComboBox_Method.addItem(classMethods_m.get(ClassificationMethod.MEAN_STDEV));
        jComboBox_Method.addItem(classMethods_m.get(ClassificationMethod.QUANTILE));
        jComboBox_Method.setSelectedItem(classMethods_m.get(ClassificationMethod.JENKS));

        // Color ramps       
        jComboBox_Gradient = GUIUtils.createStandardGradientComboBox(200, 18);

        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weighty = 0.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jComboBox_Gradient, gridBagConstraints);
        
        GUIUtils.addGradientComboBoxToList(jComboBox_Gradient);
        
    }
    
    private void rampAll() throws Exception {
        
        int classesCount = Integer.parseInt(jTextField_Classes.getText());
        double[] breaks = null;
        
        switch (getKeyByValue(classMethods_m, jComboBox_Method.getSelectedItem().toString())) {
            
            case EQUAL_RANGE:
                breaks = Classifier1D.classifyEqualRange(rasterData, classesCount);
                break;
            case JENKS:
                /* Sampling needed */
                int top = 1000;
                if(rasterData.length > top) {
                    List<Double> sampled_l = new ArrayList<Double>();
                    sampled_l.add((Double) minMaxValues.getMin());
                    sampled_l.add((Double) minMaxValues.getMax());
                    for(int v=0; v<rasterData.length; v=v+(rasterData.length / top)) {
                        sampled_l.add(rasterData[v]);
                    }
                    double[] sampledRasterData = new double[sampled_l.size()];
                    for(int v=0; v<sampled_l.size(); v++) {
                        sampledRasterData[v] = sampled_l.get(v);
                    }
                    breaks = Classifier1D.classifyNaturalBreaks(sampledRasterData, classesCount);
                    break;
                }
                
                breaks = Classifier1D.classifyNaturalBreaks(rasterData, classesCount);
                break;
            case MAX_BREAKS:
                breaks = Classifier1D.classifyMaxBreaks(rasterData, classesCount);
                break;
            case MEAN_STDEV:
                breaks = Classifier1D.classifyMeanStandardDeviation(rasterData, classesCount);
                break;
            case QUANTILE:
                breaks = Classifier1D.classifyEqualNumber(rasterData, classesCount);
                break;
        }

        if(breaks == null) {
            throw new Exception(java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.message.ErrorWhileClassifying"));
        }

        ColorMapEntry[] paletteColorMapEntries = ((GradientCanvas) jComboBox_Gradient.getSelectedItem()).getColorMapEntries();
        
        /* Calculate colors */
        ColorUtils colorUtils = new ColorUtils();
        ColorMapEntry[] colorMapEntries = new ColorMapEntry[classesCount];
        int colorsCount = paletteColorMapEntries.length;
        
        colorMapEntries[0] = new ColorMapEntry((Double) minMaxValues.getMin(), paletteColorMapEntries[0].getColor());
        for(int c=1; c<classesCount; c++) {
            
            double cellRelDistance = (double) c / (double) (classesCount-1);
            double colorRelDistance = cellRelDistance * (colorsCount - 1);
            
            Color startColor = paletteColorMapEntries[(int) Math.floor(colorRelDistance)].getColor();
            Color endColor = paletteColorMapEntries[(int) Math.ceil(colorRelDistance)].getColor();
            
            Color color = colorUtils.interpolateColor(startColor, endColor, cellRelDistance);
            colorMapEntries[c] = new ColorMapEntry(breaks[c-1], color);
        }
        
        /* Update table */
        if(colorsTablePanel == null) {
            colorsTablePanel = new ColorsTablePanel(parent, TableType.INTERVALS,
                    colorMapEntries, noDataValue, false);
            GridBagLayout layout = (GridBagLayout)getLayout();
            GridBagConstraints gbc = layout.getConstraints(jPanel_Table);
            remove(jPanel_Table);
            add(colorsTablePanel, gbc, 5);
            validate();
        } else {
            colorsTablePanel.updateTable(colorMapEntries);
        }

    }
    
    private void addRow() {
        colorsTablePanel.addRows();
    }
    
    private void removeRow() {
        colorsTablePanel.removeRow();
    }
    
    private void rampColors() throws Exception {
        if(colorsTablePanel.getSelectedRowsCount() != 2) {
            JOptionPane.showMessageDialog(
                    this,
                    java.util.ResourceBundle.getBundle("org/openjump/core/rasterimage/styler/resources/Bundle").getString("org.openjump.core.rasterimage.styler.ui.IntervalPanel.classMethods.EqualInterval.SelectTowRowsToRamp"),
                    RasterStylesExtension.extensionName,
                    JOptionPane.WARNING_MESSAGE);
        }
        colorsTablePanel.rampColors();
    }
    
    public static <T, E> T getKeyByValue(Map<T, E> map, E value) {
        for (Entry<T, E> entry : map.entrySet()) {
            if (value.equals(entry.getValue())) {
                return entry.getKey();
            }
        }
        return null;
    }
    
    public RasterSymbology getRasterSymbolizer() throws Exception{
        
        RasterSymbology rasterSymbolizer = new RasterSymbology(RasterSymbology.ColorMapType.INTERVALS);
        for (ColorMapEntry colorMapEntry : colorsTablePanel.getColorMapEntries()) {
            rasterSymbolizer.addColorMapEntry(colorMapEntry.getUpperValue(), colorMapEntry.getColor());
        }
        
        return rasterSymbolizer;
    }
    
    private final Component parent;
    private final Map<ClassificationMethod,String> classMethods_m = new HashMap<ClassificationMethod,String>();
    private double[] rasterData = null;
    private ColorsTablePanel colorsTablePanel = null;
    private double noDataValue;
    private final Range minMaxValues;
    private GradientComboBox jComboBox_Gradient;
    private boolean firstTimeShown = true;
    
    public enum ClassificationMethod {
        
            UNIQUE_VALUE, EQUAL_RANGE, QUANTILE, MEAN_STDEV, MAX_BREAKS, JENKS;
    
    }

    public GradientComboBox getjComboBox_Gradient() {
        return jComboBox_Gradient;
    }
}

